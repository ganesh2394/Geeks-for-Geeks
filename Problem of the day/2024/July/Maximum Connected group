Problem statement : 

Maximum Connected group

You are given a square binary grid. A grid is considered binary if every value in the grid is either 1 or 0.
You can change at most one cell in the grid from 0 to 1. You need to find the largest group of connected  1's. 
Two cells are said to be connected if both are adjacent(top, bottom, left, right) to each other and both have the same value.

Examples :

Input: grid = [1, 1]
             [0, 1]
Output: 4
Explanation: By changing cell (2,1), we can obtain a connected group of 4 1's
[1, 1]
[1, 1]
Input: grid = [1, 0, 1]
             [1, 0, 1]
             [1, 0, 1]
Output: 7
Explanation: By changing cell (3,2), we can obtain a connected group of 7 1's
[1, 0, 1]
[1, 0, 1]
[1, 1, 1]

Expected Time Complexity: O(n2)
Expected Auxiliary Space: O(n2)

Constraints:
1 <= size of the grid<= 500
0 <= grid[i][j] <= 1

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#start code 

class Solution {

     public int MaxConnection(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        
        // To store the size of each group of connected 1's
        int[][] group = new int[n][m];
        int groupId = 1;
        Map<Integer, Integer> groupSize = new HashMap<>();
        
        // DFS to find all groups of connected 1's
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 1 && group[i][j] == 0) {
                    int size = dfs(grid, group, i, j, groupId, directions);
                    groupSize.put(groupId, size);
                    groupId++;
                }
            }
        }
        
        int maxConnection = groupSize.values().stream().max(Integer::compare).orElse(0);
        
        // Try to change each 0 to 1 and calculate the maximum connection
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 0) {
                    Set<Integer> connectedGroups = new HashSet<>();
                    int newSize = 1;  // Changing this cell to 1
                    
                    // Check all 4 directions
                    for (int[] dir : directions) {
                        int x = i + dir[0];
                        int y = j + dir[1];
                        if (x >= 0 && x < n && y >= 0 && y < m && group[x][y] > 0) {
                            connectedGroups.add(group[x][y]);
                        }
                    }
                    
                    // Calculate the total new size by adding unique groups' sizes
                    for (int gId : connectedGroups) {
                        newSize += groupSize.get(gId);
                    }
                    
                    maxConnection = Math.max(maxConnection, newSize);
                }
            }
        }
        
        return maxConnection;
    }
    
    private int dfs(int[][] grid, int[][] group, int i, int j, int groupId, int[][] directions) {
        Stack<int[]> stack = new Stack<>();
        stack.push(new int[]{i, j});
        group[i][j] = groupId;
        int size = 0;
        
        while (!stack.isEmpty()) {
            int[] cell = stack.pop();
            int x = cell[0], y = cell[1];
            size++;
            
            for (int[] dir : directions) {
                int nx = x + dir[0];
                int ny = y + dir[1];
                
                if (nx >= 0 && nx < grid.length && ny >= 0 && ny < grid[0].length && grid[nx][ny] == 1 && group[nx][ny] == 0) {
                    stack.push(new int[]{nx, ny});
                    group[nx][ny] = groupId;
                }
            }
        }
        
        return size;
    }
}

#end code
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
