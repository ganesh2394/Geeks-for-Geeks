Problem : Array to BST

Given a sorted array. Convert it into a Height Balanced Binary Search Tree (BST). Return the root of the BST.

Height-balanced BST means a binary tree in which the depth of the left subtree and the right subtree of every node never differ by more than 1.

Note: The driver code will check the BST, if it is a Height-balanced BST, the output will be true otherwise the output will be false.

Examples :

Input: nums = [1, 2, 3, 4]
Output: true
Explanation: The preorder traversal of the following BST formed is [2, 1, 3, 4]:
           2
         /   \
        1     3
               \
                4
Input: nums = [1, 2, 3, 4, 5, 6, 7]
Ouput: true
Explanation: The preorder traversal of the following BST formed is [4, 2, 1, 3, 6, 5, 7]:
        4
       / \
      2   6
     / \   / \
    1 3  5 7

Expected Time Complexity: O(n)
Expected Auxillary Space: O(n)

Constraints:
1 ≤ nums.size() ≤ 105
1 ≤ nums[i] ≤ 105

topic tags : Binary Search Tree, Tree and Data Structure
company tags : Snapdeal, Adobe and Cisco
Level : Easy

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#start code 

class Solution {
    public Node sortedArrayToBST(int[] nums) {
        
        if(nums == null || nums.length == 0){
            return null;
        }
        
        return convertToBST(nums, 0, nums.length - 1);
    }
    
    private Node convertToBST(int[] nums, int left, int right){
          if(left > right){
              return null;
          }
          
          int mid = left + (right - left) / 2;
          Node root = new Node(nums[mid]);
          
          root.left = convertToBST(nums, left, mid - 1);
          root.right = convertToBST(nums, mid + 1, right);
          
          return root;
    }
}

#end code
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
