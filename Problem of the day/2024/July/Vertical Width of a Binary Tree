Problem Statement 

Given a Binary Tree. You need to find and return the vertical width of the tree.

Examples :

Input:
         1
       /    \
      2      3
     / \    /  \
    4   5  6   7
            \   \
             8   9
Output: 6
Explanation: The width of a binary tree is
the number of vertical paths in that tree.



The above tree contains 6 vertical lines.
Input:
     1
    /  \
   2    3
Output: 3
Explanation: The above tree has 3 vertical lines, hence the answer is 3.

Expected Time Complexity: O(nlogn)
Expected Auxiliary Space: O(height of the tree).

Constraints:
0 <= number of nodes <= 104

Level : Medium
topic tags : Traversal, Tree, Data Structures and Algorithms

--------------------------------------------------------------------
#start code 

class Solution {
    // Function to find the vertical width of a Binary Tree.
    public int verticalWidth(Node root) {
       
        if(root == null){
            return 0;
        }
        
        Set<Integer> set = new HashSet<>();
        
        findVerticalWidth(root, 0, set);
        
        return set.size();
    }
    
    private void findVerticalWidth(Node root, int hd, Set<Integer> set){
         if(root == null){
             return;
         }
         
         set.add(hd);
         
         findVerticalWidth(root.left, hd - 1, set);
         
         findVerticalWidth(root.right, hd + 1, set);
    }
}

#end code
-----------------------------------------------------------------
