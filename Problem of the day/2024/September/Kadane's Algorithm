Problem Statement : Kadane's Algorithm

Given an integer array arr[]. Find the contiguous sub-array(containing at least one number) that has the maximum sum and return its sum.

Examples:

Input: arr[] = [1, 2, 3, -2, 5]
Output: 9
Explanation: Max subarray sum is 9 of elements (1, 2, 3, -2, 5) which is a contiguous subarray.

Input: arr[] = [-1, -2, -3, -4]
Output: -1
Explanation: Max subarray sum is -1 of element (-1)

Input: arr[] = [5, 4, 7]
Output: 16
Explanation: Max subarray sum is 16 of element (5, 4, 7)

Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)

Constraints:
1 ≤ arr.size() ≤ 105
-107 ≤ arr[i] ≤ 107

Topic tags : Arrays, Dynamic Programming, Data Structures and Algorithms

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#start code

class Solution {

    // arr: input array
    // Function to find the sum of contiguous subarray with maximum sum.
    long maxSubarraySum(int[] arr) {

        long max_sum = arr[0];
        long current_max_sum = arr[0];
        
        for(int i = 1; i < arr.length; i++){
             current_max_sum = Math.max(arr[i], current_max_sum + arr[i]);
             max_sum = Math.max(current_max_sum, max_sum);
        }
        
        return max_sum;
    }
}

#end code
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
