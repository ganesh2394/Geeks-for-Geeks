Problem statement : Bottom View of Binary Tree

Given a binary tree, return an array where elements represent the bottom view of the binary tree from left to right.

Note: If there are multiple bottom-most nodes for a horizontal distance from the root, then the latter one in the level traversal is
considered. For example, in the below diagram, 3 and 4 are both the bottommost nodes at a horizontal distance of 0, here 4 will be considered.

                      20
                    /    \
                  8       22
                /   \     /   \
              5      3 4     25
                     /    \      
                 10       14

For the above tree, the output should be 5 10 4 14 25.

Examples :

Input:
       1
     /   \
    3     2
Output: 3 1 2
Explanation: First case represents a tree with 3 nodes and 2 edges where root is 1, left child of 1 is 3 and right child of 1 is 2.

Thus bottom view of the binary tree will be 3 1 2.
Input:
         10
       /    \
      20    30
     /  \
    40   60
Output: 40 20 60 30

Expected Time Complexity: O(n)
Expected Auxiliary Space: O(n)

Constraints:
1 <= Number of nodes <= 105
1 <= Data of a node <= 105

Level : Medium
topic tags : Tree and Data Structures

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#start code 


class Solution
{
    //Function to return a list containing the bottom view of the given tree.
    public ArrayList <Integer> bottomView(Node root)
    {
        ArrayList <Integer> result = new ArrayList<>();
        
        if(root == null) return result;
        
        Map<Integer, Integer> map = new TreeMap<>();
        
        Queue<Pair> queue = new LinkedList<>();
        
        queue.add(new Pair(root, 0));
        
        while(!queue.isEmpty()){
            
            Pair pair = queue.poll();
            
            Node node = pair.node;
            int hd = pair.hd;
            
            map.put(hd, node.data);
            
            if(node.left != null){
                 queue.add(new Pair(node.left, hd - 1));
            }
            
            if(node.right != null){
                 queue.add(new Pair(node.right, hd + 1));
            }
        }
        
        for(Integer val : map.values()){
             result.add(val);
        }
        
        return result;
        
        
    }
    
    class Pair{
          Node node;
          int hd;
          
          Pair(Node node, int hd){
              this.node = node;
              this.hd = hd;
          }
    }
}

#end code
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


