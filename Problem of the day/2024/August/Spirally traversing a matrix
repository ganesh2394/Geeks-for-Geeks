Problem Statement : Spirally traversing a matrix

You are given a rectangular matrix, and your task is to return an array while traversing the matrix in spiral form.

Examples:

Input: matrix[][] = [[1, 2, 3, 4],
                  [5, 6, 7, 8],
                  [9, 10, 11, 12],
                  [13, 14, 15,16]]
Output: [1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10]
Explanation: --?

Input: matrix[][] = [[1, 2, 3, 4],
                  [5, 6, 7, 8],
                  [9, 10, 11, 12]]
Output: [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7]
Explanation: Applying same technique as shown above, output for the 2nd testcase will be 1 2 3 4 8 12 11 10 9 5 6 7.

Expected Time Complexity: O(n2)
Expected Auxiliary Space: O(n2)

level : Medium
company tags : Paytm, Flipkart, Morgan Stanley, Microsoft, OYO Rooms, Snapdeal, D-E-ShawMake, MyTrip, Oracle, MAQ Software, Adobenearbuy, Nagarro, Browser, Stack and Salesforce
topic tags : Matrix, Array and Data Structure 

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#start code

class Solution {
    // Function to return a list of integers denoting spiral traversal of matrix.
    public ArrayList<Integer> spirallyTraverse(int matrix[][]) {
        
         ArrayList<Integer> result = new ArrayList<>();
         
         if(matrix == null || matrix.length == 0){
             return result;
         }
         
         int top = 0, bottom = matrix.length - 1;
         int left = 0, right = matrix[0].length - 1;
         
         while(top <= bottom && left <= right){
               // traverse from left to right
               for(int i = left; i <= right ; i++){
                   result.add(matrix[top][i]);
               }
               top++;
               
               // traverse from top to bottom
               for(int i = top; i <= bottom; i++){
                    result.add(matrix[i][right]);
               }
               right--;
               
               
               if(top <= bottom){
                    // traverse from right to left
                    for(int i = right; i >= left; i--){
                        result.add(matrix[bottom][i]);
                    }
                    bottom--;
               }
               
               if(left <= right){
                   // traverse from bottom to top
                   for(int i = bottom; i >= top; i--){
                       result.add(matrix[i][left]);
                   }
                   left++;
               }
               
         }
         
         return result;
    }
}


#end code
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
