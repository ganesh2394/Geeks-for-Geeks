Problem statement : Shortest path in Undirected Graph

You are given an Undirected Graph having unit weight of the edges, find the shortest path from src to all the vertex and 
if it is unreachable to reach any vertex, then return -1 for that vertex.

Examples :

Input:
n = 9, m = 10
edges=[[0,1],[0,3],[3,4],[4,5],[5,6],[1,2],[2,6],[6,7],[7,8],[6,8]] 
src=0
Output:
0 1 2 1 2 3 3 4 4

Input:
n = 4, m = 2
edges=[[1,3],[3,0]] 
src=3
Output:
1 1 -1 0

Constraint:
1<=n,m<=104
0<=edges[i][j]<=n-1

Expected Time Complexity: O(N + E), where N is the number of nodes and E is the edges
Expected Space Complexity: O(N)

Level : Medium
topic tags : BFS,Queue and Algorithm 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#start code 

class Solution {
    
    public int[] shortestPath(int[][] edges,int n,int m ,int src) {
        
         List<List<Integer>> graph = new ArrayList<>();
         
         for(int i = 0; i < n; i++){
              graph.add(new ArrayList<>());
         }
         
         for(int[] edge : edges){
              int u  = edge[0];
              int v = edge[1];
              graph.get(u).add(v);
              graph.get(v).add(u);
         }
         
         int[] distance = new int[n];
         Arrays.fill(distance, -1);
         
         Queue<Integer> queue = new LinkedList<>();
         queue.offer(src);
         distance[src] = 0;
         
         while(!queue.isEmpty()){
               int node = queue.poll();
               int dist = distance[node];
               
               for(int neighbor : graph.get(node)){
                     if(distance[neighbor] == -1){
                          distance[neighbor] = dist + 1;
                          queue.offer(neighbor);
                     }
               }
         }
         
         return distance;
    }
}

#end code
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
